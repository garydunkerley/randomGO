package main

import (
	game "github.com/garydunkerley/randomGO/internal/game"

	_ "image/png"
	"log"

	"github.com/hajimehoshi/ebiten/v2"
	"github.com/hajimehoshi/ebiten/v2/ebitenutil"
)

var wood *ebiten.Image
var graph *ebiten.Image
var whiteStone *ebiten.Image
var blackStone *ebiten.Image

func init() {
	var err error
	wood, _, err = ebitenutil.NewImageFromFile("assets/woodgrain3.png")

	graph, _, err = ebitenutil.NewImageFromFile("assets/temporary/board.png")
	whiteStone, _, err = ebitenutil.NewImageFromFile("assets/go_stone_white.png")
	blackStone, _, err = ebitenutil.NewImageFromFile("assets/go_stone_black.png")

	if err != nil {
		log.Fatal(err)
	}
}

type Game struct{}

// TODO:
// Figure out how to pipe in the board generated by graphviz
// as well as the geometric data.
// I think we can use graphviz to output the raw .png file for the board lines.
// To get the geometric data, we're going to need to pipe in the // dot data.

// We also need to figure out how to get this to interface with
// the backend.

func (g *Game) Update() error {
	return nil
}

func (g *Game) Layout(outsideWidth, outsideHeight int) (screenWidth, screenHeight int) {
	width, height := wood.Size()
	return width + 500, height
}

func (g *Game) Draw(screen *ebiten.Image) {

	// draws the wood for the board
	screen.DrawImage(wood, nil)

	// adds the graph produced by graphviz
	// with suitable translation and rescaling
	// to ensure that it is centered
	gWidth, gHeight := graph.Size()
	bWidth, bHeight := wood.Size()
	rescale := 0.95

	rWidth := rescale * float64(bWidth) / float64(gWidth)
	rHeight := rescale * float64(bHeight) / float64(gHeight)

	tWidth := ((1 - rescale) * float64(bWidth)) / 2
	tHeight := ((1 - rescale) * float64(bHeight)) / 2

	graphPos := &ebiten.DrawImageOptions{}
	graphPos.GeoM.Scale(rWidth, rHeight)
	graphPos.GeoM.Translate(tWidth, tHeight)

	screen.DrawImage(graph, graphPos)
}

// this struct will track the stone objects as they occur in the game
type ebitenStone struct {
	stone      *ebiten.Image
	id         int
	xPos, yPos float64
}

func getPlayerInput() {

}

func update(screen *ebiten.Image) error {

}

func main() {

	state, isRandom := game.EbitenRandomGame(300, 10)

	game.MakeEbitenGraphAsset(state.GoGraph, isRandom)

	ebiten.SetWindowSize(1000, 1000)
	ebiten.SetWindowTitle("randomGO: Randomly generated Go boards")
	if err := ebiten.RunGame(&Game{}); err != nil {
		log.Fatal(err)
	}
}
